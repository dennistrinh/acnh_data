<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Welcome!</title>
  <link href="https://fonts.googleapis.com/css2?family=Open+Sans&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/css/styles.css" type="text/css">
</head>
<body>
  <div class="menu_container">
    <ul class="menu">
      <li class="menu_button"><a href="./" class="menu_link">Home</a></li>
      <li class="menu_button"><a href="./bugs" class="menu_link">Bugs</a></li>
      <li class="menu_button"><a href="./fish" class="menu_link">Fish</a></li>
      <li class="menu_button"><a href="./sea" class="menu_link">Sea Creatures</a></li>
      <li class="menu_button"><a href="./active" class="menu_link">Active This Month</a></li>
      <li class="menu_button"><a href="./github" class="menu_link"><img src="images/octocat.png" id="octocat" title="github"></a></li>
    </ul>
  </div>
  <div class="menu_container">
    <h3>July 22nd, 2020: Deep Dive</h3>
    <p> Fireworks have finally stopped.
	Sea Creatures have been added to the database.
	I also found a bug while reorganizing some of
	my code. Due to the way my SQL schema records
	date ranges, if certain things appeared in 2021,
	then they wouldn't show up at all on the webpage.
	It's possible I might have to change the way that
	data is represented on the SQL table. Instead of having
	"2020-05-01" to "2020-06-30" for example, I might have
	to record true/false booleans for all the months that
	the creatures show up. For now, I have a simple workaround
	that checks for both 2020 and 2021. <br /><br /> 
	As a side note, I've been working through the Golang tutorial.
	It uses some interesting conventions like short variable declaration (:=)
	and also the way they handle type declarations. The type always comes after
	the variable in Go. As stated from the docs, the type is declared after the
	variable for readability's sake. For example, you can always identify the
	name and return types for a function no matter how nested it becomes.
	See <a href='https://blog.golang.org/declaration-syntax'>declaration syntax</a>.
    </p>
  </div>
  <div class="menu_container">
    <h3>July 13th, 2020: Time zones</h3>
    <p> Fireworks are still going strong at night.
	At long last, the active page has been fixed. It
	seems the three conditionals I added to the SQL
	(see last blog post) query accounts for all situations
	that was causing data to be missing from the cells.
	In addition, you can now filter by timezones! It was fairly
	straightforward to implement since it builds upon my
	military time converter. I would have the user select their time
	zone and add on whatever UTC value they chose to the current
	UTC+0 time. i.e. If the user chose UTC-7, then the program takes
	the current time, subtracts it by 7, then builds the query.
    </p>
  </div>
  <div class="menu_container">
    <h3>July 8th, 2020: Surely you Jest</h3>
    <p> The fireworks haven't stopped since July 4th.
      One of my neighbors seems to have stockpiled
      a decades worth of them and he goes at it every night.
      Anywho, I've been dabbling with testing libraries like
      Jest and Selenium and they're pretty friendly to use.
      Selenium took a while to wrap my head around since
      you have to build the driver first and use await calls
      to wait for the driver to pull info from the page you're
      testing. I just have a basic test for the bugs page right
      now, but will expand it as I go. <br /><br />
      In terms of functionality, I started working on
      the timezone converter; however, there's an unresolved bug I have to
      resolve first: if the current time falls between a certain range (11 PM
      to 5 AM), then my SQL queries don't properly handle the day
      change. As a result, the only data that shows up are the bugs/fish
      that are available all day. My current query doesn't account for changes
      in a new day, so it gets confused when I say 'SELECT * FROM 'bugs' WHERE
      currentTime IS BETWEEN start_time AND end_time'. One workaround I think
      might work is to a negation so not between the two times. Another solution
      could be to set 3 conditionals:
     </p>
      <ol>
        <li>start < end AND currentTime BETWEEN start and end (the original query)</li>
        <li>end < start AND currentTime < start AND currentTime < end (covers day changes)</li>
        <li>end < start AND currentTime > start (covers period between 11 PM and midnight)</li>
      </ol>
    <p>
      I'll play with both ideas tomorrow and see where that takes me.
    </p>
  </div>
  <div class="menu_container">
    <h3>July 1st, 2020: Cleaning Up & Looking Into Testing</h3>
    <p> Happy July! I cleaned up some of the code into separate
	helper functions. In addition, months are now visible on
	the tables as well. I merged the shadow size column with
	the location column for fish to keep the table size consistent
	with the bugs table. Adjusting the CSS and resizing the tables
	fixed the bug where some tables would show up smaller. I've
	been looking at some <a href="https://github.com/goldbergyoni/nodebestpractices">
	node best practices</a> and I have to say I have a lot of work
	to do. In particular, testing has been rather lacking in this
	project and in hindsight, I should have designed them as I
	was building the program. I've been looking into Jest and Selenium
	to do some basic tests to start off.
    </p>
  </div>
  <div class="menu_container">
    <h3>June 26th, 2020: Time Complexities</h3>
    <p> I refactored some of the code for reusability
	sake. The conversion of 24 hour time to 12 hour
	time was copied and pasted in every route call, so
	I cleaned it up into a separate function. I readjusted
	the times in the active categories as well as there was
	an error in how I wrote my SQL query. The statement
	was supposed to check times between the starting time
	and the ending time, but instead it was written as
	check times less than the starting time and less than
	the end time. My oversight is not looking into testing earlier.
	Manually looking at the data to see if it's correct is fairly
	ineffective. There's another bug I suspect will arise from this
	correction. For example, say a certain fish is only active from
	11 pm (23:00) to 8 am. The current time is 23:15:00, so it passes
	the inequality for being greater than the start time of 11 pm. However,
	when it goes to check if it's less than the end time, the inequality fails
	since 23:15 is technically greater than 8 AM. A fix might be to combine the
	times and date into a datetime element. Also, this is a good time to
	look into testing tools in npm.
    </p>
  </div>
  <div class="menu_container">
    <h3>June 22nd, 2020: Active Bugs & Fish</h3>
    <p> After fiddling with uncooperative SQL queries,
    	I was able to create a table showing the currently
	active fishes and bugs. It currently uses UTC timezone
	as a result of the Date.now() functionality of Javascript,
	but I'm thinking of adding a timezone option for the user.
	The git repo is also available for viewing as well.
    </p>
  </div>
  <div class="menu_container">
    <h3>June 19th, 2020: Refactoring</h3>
    <p> I've been exporting code bits into their own modules
    	for organization purposes. The API requests code needs
	a bit of refactoring as well. The times have been
	"demilitarized" and switched to AM/PM format. It
	wasn't too bad of a fix. I just had to subtract 12
	from the database query if the time exceeded 12 and stick
	a PM in front of it. New filters are coming soon.
    </p>
  </div>
  <div class="menu_container">
    <h3>June 16th, 2020: Unnecessary complexity</h3>
    <p> After doing some experimentation and research with React,
    	I feel like I'm making the application needlessly complicated
	for the sake of including more technologies. Unless I plan to
	make an API out of my database that works with CRUD (create,
	read, update, and delete), I feel as if EJS is enough for the
	time being. If anything, I should split this blog with the data
	website and change this into a React App. Regardless, I learned
	quite a bit about React. It's pretty neat how you can just package
	all of your HTML into reusuable components. In regards to this website,
	I still need to adjust the CSS on the tables. All the tables
	display properly with correct page sizing, but the Dab (October Fish)
	is strangely offset.
    </p>
  </div>
  <div class="menu_container">
    <h3>June 11th, 2020: Back at it</h3>
    <p> Due to some work obligations, I've been away for a bit.
    	Doing some research for the moment learning basic React.
	Tomorrow, I'll start breaking apart the EJS files and
	try not to butcher the website in the process.
    </p>
  </div>
  <div class="menu_container">
    <h3>May 29th, 2020: Reorganization</h3>
    <p> Still working on understanding Jenkins. In an effort to explore more
    	technologies, I'm going to move from EJS to JSX to learn a bit about
    	React. Afterwards, the plan is to reorganize my SQL schema a bit or possibly
    	reformat the data in the tables so it's a bit more readable. A friend once told me,
    	"military time requires me to do math. Just stick with AM and PM."
    </p>
  </div>
  <div class="menu_container">
    <h3>May 22nd, 2020: Messing around with continuous integration</h3>
    <p>I've been poking around at CI tooling. I'm trying to setup a Jenkins
       pipeline to automatically build my Docker image, but I'm having a little trouble
       understanding some of the documentation. Needs a bit more research and YouTube
       video searching. On the other hand, I still need to refactor the Express requests
       into separate functions for reusability sake. Many things to do. Fun times ahead.
    </p>
  </div>
  <div class="menu_container">
    <h3>May 19th, 2020: Tables updated with more info</h3>
    <p>I wonder what happened to my first certificate, but it didn't seem to go through.
       I reissued a new certificate with Certbot and it seems to be set up correctly.
       All my HTTP requests now automatically redirect to HTTPS as well. Got the cool
       little lock next to my domain name. I still need to figure out how to do that
       second table though.
    </p>
  </div>
  <div class="menu_container">
    <h3>May 18th, 2020: Tables updated with more info</h3>
    <p>Times and shadow sizes are up. HTTPS should also be set up soon once the certificate
       gets validated. I still have to figure out how to get two tables up at the same time.
       I could run two queries in one statement, but nodejs highly recommends against it as
       it is a security risk. Hmm.
    </p>
  </div>
  <div class="menu_container">
    <h3>May 14th, 2020: Images are up. Basic filtering also working.</h3>
    <p>160 images all in. Had to do some formatting with the SQL names to render the images correctly.
       At the moment, it is possible to filter to see which new bugs and fish are catchable in a month.
       Biggest problem today: Converting the user's month input to SQL readable input then passing that
       to the query. My solution was to create a separate module that translates the user's input then
       returns a complete SQL statement ready to use for querying. Locations are also in. 
       I need to add a separate table for bugs and fish that continue to spawn
       in a new month. Times for spawns also need to be added. Table CSS needs some work (some
       of the tables resize strangely).
    </p>
  </div>
  <div class="menu_container">
    <h3>May 13th, 2020: Setting up DNS and port forwarding done.</h3>
    <p>Woo! I can connect to the EC2 instance anywhere. I still need to upload images though.</p>
  </div>
  <div class="menu_container">
    <h3>May 12th, 2020: Got the database connected.</h3>
    <p>Forgot to allow public IPs in the inbound rules. Whoops.</p>
  </div>
  <div class="menu_container">
    <h3>May 9th, 2020: Got the EC2 instance set up.</h3>
    <p>Using the Amazon Linux 2 AMI. Let's see if I can get node to see my RDS database."
       It seems to be mad at me for some connection timeout reason. Possibly the
       wrong password. Not sure.
    </p>
  </div>
  <div class="menu_container">
    <h3>May 7th, 2020: Dumped the database onto RDS</h3>
    <p>Took my local MariaDB and moved it over to RDS. Went smoother than I thought.
       Thanks mysqldump.
    </p>
  </div>
  <div class="menu_container">
    <h3>May 3rd, 2020: Finger workout</h3>
    <p>I should've found a different way to insert all that data into MariaDB instead of writing hundreds of queries.
       Oh well. My fingers probably grew some muscles. I had to find a workaround solution for bugs and fish that
       spawn in a non-continuous timeframe. i.e. Spawns in April and October to December. I split them into two columns.
       There's probably a better way to do this. Gotta research.
    </p>
  </div>
  <div class="menu_container">
    <h3>May 1st, 2020: Animal Crossing</h3>
    <p>My goal this month is to create a website where I can filter animal crossing data by month. I'm thinking
       of exploring AWS while doing this project.
    </p>
  </div>
</body>
</html>
